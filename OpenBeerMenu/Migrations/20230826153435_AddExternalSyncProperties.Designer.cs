// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OpenBeerMenu.Data;

#nullable disable

namespace OpenBeerMenu.Migrations
{
    [DbContext(typeof(OpenBeerMenuDbContext))]
    [Migration("20230826153435_AddExternalSyncProperties")]
    partial class AddExternalSyncProperties
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OpenBeerMenu.Data.Entities.BeerInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Abv")
                        .HasColumnType("double precision")
                        .HasColumnName("abv");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Style")
                        .HasColumnType("text")
                        .HasColumnName("style");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_url");

                    b.HasKey("Id")
                        .HasName("pk_beers");

                    b.ToTable("beers", (string)null);
                });

            modelBuilder.Entity("OpenBeerMenu.Data.Entities.MenuInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_menus");

                    b.ToTable("menus", (string)null);
                });

            modelBuilder.Entity("OpenBeerMenu.Data.Entities.MenuSection", b =>
                {
                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid")
                        .HasColumnName("menu_id");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("section_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.HasKey("MenuId", "SectionId")
                        .HasName("pk_menu_section");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("ix_menu_section_section_id");

                    b.ToTable("menu_section", (string)null);
                });

            modelBuilder.Entity("OpenBeerMenu.Data.Entities.SectionBeer", b =>
                {
                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("section_id");

                    b.Property<Guid>("BeerId")
                        .HasColumnType("uuid")
                        .HasColumnName("beer_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.HasKey("SectionId", "BeerId")
                        .HasName("pk_section_beer");

                    b.HasIndex("BeerId")
                        .HasDatabaseName("ix_section_beer_beer_id");

                    b.ToTable("section_beer", (string)null);
                });

            modelBuilder.Entity("OpenBeerMenu.Data.Entities.SectionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BeerInfoId")
                        .HasColumnType("uuid")
                        .HasColumnName("beer_info_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("ShowHeader")
                        .HasColumnType("boolean")
                        .HasColumnName("show_header");

                    b.HasKey("Id")
                        .HasName("pk_sections");

                    b.HasIndex("BeerInfoId")
                        .HasDatabaseName("ix_sections_beer_info_id");

                    b.ToTable("sections", (string)null);
                });

            modelBuilder.Entity("OpenBeerMenu.Data.Entities.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessCode")
                        .HasColumnType("text")
                        .HasColumnName("access_code");

                    b.Property<Guid?>("DefaultMenuId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_menu_id");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("ShowCompanyHeader")
                        .HasColumnType("boolean")
                        .HasColumnName("show_company_header");

                    b.Property<bool>("SyncEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("sync_enabled");

                    b.Property<string>("SyncKey")
                        .HasColumnType("text")
                        .HasColumnName("sync_key");

                    b.Property<string>("SyncUrl")
                        .HasColumnType("text")
                        .HasColumnName("sync_url");

                    b.HasKey("Id")
                        .HasName("pk_settings");

                    b.HasIndex("DefaultMenuId")
                        .HasDatabaseName("ix_settings_default_menu_id");

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("OpenBeerMenu.Data.Entities.MenuSection", b =>
                {
                    b.HasOne("OpenBeerMenu.Data.Entities.MenuInfo", "Menu")
                        .WithMany("MenuSections")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_section_menus_menu_id");

                    b.HasOne("OpenBeerMenu.Data.Entities.SectionInfo", "Section")
                        .WithMany("MenuSections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_section_sections_section_id");

                    b.Navigation("Menu");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("OpenBeerMenu.Data.Entities.SectionBeer", b =>
                {
                    b.HasOne("OpenBeerMenu.Data.Entities.BeerInfo", "Beer")
                        .WithMany("SectionBeers")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_section_beer_beers_beer_id");

                    b.HasOne("OpenBeerMenu.Data.Entities.SectionInfo", "Section")
                        .WithMany("SectionBeers")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_section_beer_sections_section_id");

                    b.Navigation("Beer");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("OpenBeerMenu.Data.Entities.SectionInfo", b =>
                {
                    b.HasOne("OpenBeerMenu.Data.Entities.BeerInfo", null)
                        .WithMany("Sections")
                        .HasForeignKey("BeerInfoId")
                        .HasConstraintName("fk_sections_beers_beer_info_id");
                });

            modelBuilder.Entity("OpenBeerMenu.Data.Entities.Settings", b =>
                {
                    b.HasOne("OpenBeerMenu.Data.Entities.MenuInfo", "DefaultMenu")
                        .WithMany()
                        .HasForeignKey("DefaultMenuId")
                        .HasConstraintName("fk_settings_menus_default_menu_id");

                    b.Navigation("DefaultMenu");
                });

            modelBuilder.Entity("OpenBeerMenu.Data.Entities.BeerInfo", b =>
                {
                    b.Navigation("SectionBeers");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("OpenBeerMenu.Data.Entities.MenuInfo", b =>
                {
                    b.Navigation("MenuSections");
                });

            modelBuilder.Entity("OpenBeerMenu.Data.Entities.SectionInfo", b =>
                {
                    b.Navigation("MenuSections");

                    b.Navigation("SectionBeers");
                });
#pragma warning restore 612, 618
        }
    }
}
