@using OpenBeerMenu.Shared.DragAndDrop
@using OpenBeerMenu.Shared.Management.ItemForms.Views
@using OpenBeerMenu.Data.Entities
@using OpenBeerMenu.Services
@inject BeerInfoService BeerInfoService
<div>
    <div class="flex gap-4">
        <label>
            Name:
            <input type="text" value="@Name" @onchange="OnNameChangedAsync"/>
        </label>
        
        <label>
            Display Section Header:
            <input type="checkbox" class="accent-green-600" checked="@DisplayHeader" @onchange="OnDisplayHeaderChangedAsync"/>
        </label>
        
    </div>
    <div class="my-4">
        <h3 class="text-xl">Beers</h3>
        <DragAndDropList Items="Beers.Cast<object>().ToList()" PositionsChanged="OnPositionsChangedAsync" ItemRemoved="OnItemRemovedAsync">
            <DataView>
                <BeerInfoView/>
            </DataView>
        </DragAndDropList>
        <div class="my-4">
            @if (AddableBeers.Any())
            {
                <select class="@SelectClassString" @onchange="OnBeerSelectionChanged">
                    @if (_selectedBeer is null)
                    {
                        <option class="hidden" disabled value selected>Select...</option>
                    }
                    @foreach (var beer in AddableBeers)
                    {
                        <option value="@beer.Id">@beer.Name</option>
                    }
                </select>
                <button class="btn btn-primary" @onclick="AddBeerAsync">Add Beer</button>
            }
            else
            {
                <select class="@SelectClassString cursor-not-allowed" disabled>
                    <option class="hidden" disabled value selected>Select...</option>
                </select>
                <button class="btn btn-primary cursor-not-allowed" disabled>Add Beer</button>
            }
        </div>
    </div>
</div>

@code
{
    private const string UnselectedItemClassString = "bg-zinc-900 text-gray-300";
    private const string SelectedItemClassString = "bg-zinc-900";
    private string SelectClassString => _selectedBeer is null ? UnselectedItemClassString : SelectedItemClassString;

    private BeerInfo _selectedBeer;

    private IEnumerable<BeerInfo> AddableBeers => _allBeers.Except(Beers);
    private IReadOnlyList<BeerInfo> _allBeers = Array.Empty<BeerInfo>();
    
    [CascadingParameter]
    public AccordionItem Container { get; set; }
    
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public EventCallback<string> NameChanged { get; set; }
    
    [Parameter]
    public bool DisplayHeader { get; set; }
    [Parameter]
    public EventCallback<bool> DisplayHeaderChanged { get; set; }
    
    [Parameter]
    public IList<BeerInfo> Beers { get; set; }
    [Parameter]
    public EventCallback<IList<BeerInfo>> BeersChanged { get; set; }
    [Parameter]
    public EventCallback<BeerInfo> BeerAdded { get; set; }
    [Parameter]
    public EventCallback<BeerInfo> BeerRemoved { get; set; }
    [Parameter]
    public EventCallback<IList<BeerInfo>> BeerPositionsChanged { get; set; }

    [Parameter]
    public EventCallback PropertyChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _allBeers = await BeerInfoService.GetBeersAsync();
        
        BeerInfoService.BeersUpdated += BeersUpdatedAsync;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Container.SetContentHeightAsync();
    }

    private async Task BeersUpdatedAsync()
    {
        _allBeers = await BeerInfoService.GetBeersAsync();
    }

    private async Task OnNameChangedAsync(ChangeEventArgs e)
    {
        if (e.Value is not string value)
            return;

        await NameChanged.InvokeAsync(value);
        await PropertyChanged.InvokeAsync();
    }

    private async Task OnDisplayHeaderChangedAsync(ChangeEventArgs e)
    {
        if (e.Value is not bool value)
            return;

        await DisplayHeaderChanged.InvokeAsync(value);
        await PropertyChanged.InvokeAsync();
    }

    private async Task OnPositionsChangedAsync(IEnumerable<object> items)
    {
        var beers = items.Cast<BeerInfo>().ToList();

        await BeerPositionsChanged.InvokeAsync(beers);
        
        await BeersChanged.InvokeAsync(beers);
        await PropertyChanged.InvokeAsync();
    }

    private async Task OnItemRemovedAsync(object item)
    {
        if (item is not BeerInfo beer)
            throw new InvalidOperationException("Item received in an item removed event was not the expected type");

        var beers = Beers.ToList();
        beers.Remove(beer);
        
        await BeerRemoved.InvokeAsync(beer);
        await BeersChanged.InvokeAsync(beers);
        await PropertyChanged.InvokeAsync();
    }

    private void OnBeerSelectionChanged(ChangeEventArgs e)
    {
        if (!Guid.TryParse(e.Value?.ToString(), out var id))
            throw new ArgumentException($"The value: {e.Value} is not a guid!");
        
        _selectedBeer = _allBeers.FirstOrDefault(x => x.Id == id);

        if (_selectedBeer is null)
            throw new ArgumentException($"The selected guid: {id} did not match any valid ids!");
    }

    private async Task AddBeerAsync()
    {
        if (_selectedBeer is null)
            return;

        var beers = Beers.ToList();
        beers.Add(_selectedBeer);

        await BeerAdded.InvokeAsync(_selectedBeer);
        await BeersChanged.InvokeAsync(beers);
        await PropertyChanged.InvokeAsync();
        
        _selectedBeer = null;
    }

}